local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Kenri's Scripts",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "KenriScripts Hub",
   LoadingSubtitle = "",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Kenri's Scripts"
   },
   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

-- Pet data for each egg type
local PetData = {
    ["Common Egg"] = {
        ["Golden Lab"] = 33.33,
        ["Dog"] = 33.33,
        ["Bunny"] = 33.33
    },
    ["Uncommon Egg"] = {
        ["Black Bunny"] = 25,
        ["Chicken"] = 25,
        ["Cat"] = 25,
        ["Deer"] = 25
    },
    ["Rare Egg"] = {
        ["Orange Tabby"] = 33.33,
        ["Spotted Deer"] = 25,
        ["Pig"] = 16.67,
        ["Rooster"] = 16.67,
        ["Monkey"] = 8.33
    },
    ["Legendary Egg"] = {
        ["Cow"] = 42.55,
        ["Silver Monkey"] = 42.55,
        ["Sea Otter"] = 10.64,
        ["Turtle"] = 2.13,
        ["Polar Bear"] = 2.13
    },
    ["Mythical Egg"] = {
        ["Grey Mouse"] = 35.71,
        ["Brown Mouse"] = 26.79,
        ["Squirrel"] = 26.79,
        ["Red Giant Ant"] = 8.93,
        ["Red Fox"] = 1.79
    },
    ["Bug Egg"] = {
        ["Snail"] = 40,
        ["Giant Ant"] = 30,
        ["Caterpillar"] = 25,
        ["Praying Mantis"] = 4,
        ["Dragonfly"] = 1
    },
    ["Night Egg"] = {
        ["Hedgehog"] = 47,
        ["Mole"] = 23.5,
        ["Frog"] = 17.63,
        ["Echo Frog"] = 8.23,
        ["Night Owl"] = 3.53,
        ["Raccoon"] = 0.12
    },
    ["Premium Night Egg"] = {
        ["Hedgehog"] = 49,
        ["Mole"] = 22,
        ["Frog"] = 14,
        ["Echo Frog"] = 10,
        ["Night Owl"] = 4,
        ["Raccoon"] = 1
    },
    ["Bee Egg"] = {
        ["Bee"] = 65,
        ["Honey Bee"] = 25,
        ["Bear Bee"] = 5,
        ["Petal Bee"] = 4,
        ["Queen Bee (Pet)"] = 1
    },
    ["Anti Bee Egg"] = {
        ["Wasp"] = 55,
        ["Tarantula Hawk"] = 30,
        ["Moth"] = 13.75,
        ["Butterfly"] = 1,
        ["Disco Bee"] = 0.25
    },
    ["Common Summer Egg"] = {
        ["Starfish"] = 50,
        ["Seagull"] = 25,
        ["Crab"] = 25
    },
    ["Rare Summer Egg"] = {
        ["Flamingo"] = 30,
        ["Toucan"] = 25,
        ["Sea Turtle"] = 20,
        ["Orangutan"] = 15,
        ["Seal"] = 10
    },
    ["Paradise Egg"] = {
        ["Ostrich"] = 40,
        ["Peacock"] = 30,
        ["Capybara"] = 21,
        ["Scarlet Macaw"] = 8,
        ["Mimic Octopus"] = 1
    },
    ["Oasis Egg"] = {
        ["Meerkat"] = 45,
        ["Sand Snake"] = 34.5,
        ["Axolotl"] = 15,
        ["Hyacinth Macaw"] = 5,
        ["Fennec Fox"] = 0.5
    },
    ["Premium Oasis Egg"] = {
        ["Meerkat"] = 45,
        ["Sand Snake"] = 34.5,
        ["Axolotl"] = 15,
        ["Hyacinth Macaw"] = 5,
        ["Fennec Fox"] = 0.5
    },
    ["Dinosaur Egg"] = {
        ["Raptor"] = 35,
        ["Triceratops"] = 32.5,
        ["Stegosaurus"] = 28,
        ["Pterodactyl"] = 3,
        ["Brontosaurus"] = 1,
        ["T-Rex"] = 0.5
    },
    ["Primal Egg"] = {
        ["Parasaurolophus"] = 35,
        ["Iguanodon"] = 32.5,
        ["Pachycephalosaurus"] = 28,
        ["Dilophosaurus"] = 3,
        ["Ankylosaurus"] = 1,
        ["Spinosaurus"] = 0.5
    },
    ["Premium Primal Egg"] = {
        ["Parasaurolophus"] = 35,
        ["Iguanodon"] = 32.5,
        ["Pachycephalosaurus"] = 28,
        ["Dilophosaurus"] = 3,
        ["Ankylosaurus"] = 1,
        ["Spinosaurus"] = 0.5
    },
    ["Zen Egg"] = {
        ["Shiba Inu"] = 40,
        ["Nihonzaru"] = 31,
        ["Tanuki"] = 20.82,
        ["Tanchozuru"] = 4.6,
        ["Kappa"] = 3.5,
        ["Kitsune"] = 0.08
    },
    ["Gourmet Egg"] = {
        ["Bagel Bunny"] = 50,
        ["Pancake Mole"] = 38,
        ["Sushi Bear"] = 7,
        ["Spaghetti Sloth"] = 4,
        ["French Fry Ferret"] = 1
    }
}

-- Variables for egg visuals
local EggVisuals = {}
local VisualsEnabled = false
local AutoRerollEnabled = false
local RerollSpeed = 0.5
local SelectedPet = ""
local AutoRerollConnection
local PausedEggs = {} -- Track eggs that found the selected pet
local SavedPredictions = {} -- Store predictions so they don't change when toggling

-- Function to get all unique pets from player's actual eggs
local function getAllUniquePets()
    local uniquePets = {}
    local petSet = {}
    
    -- Only get pets from eggs that actually exist in EggVisuals
    for egg, visual in pairs(EggVisuals) do
        if visual.eggName and PetData[visual.eggName] then
            for petName, _ in pairs(PetData[visual.eggName]) do
                if not petSet[petName] then
                    petSet[petName] = true
                    table.insert(uniquePets, petName)
                end
            end
        end
    end
    
    table.sort(uniquePets) -- Sort alphabetically
    return uniquePets
end

-- FIXED: Weighted random pet selection using actual drop chances
local function getRandomPet(eggName)
    local pets = PetData[eggName]
    if not pets then return "Unknown Pet" end
    
    -- Create a weighted selection system
    local totalWeight = 0
    local weightedPets = {}
    
    -- Calculate total weight and create weighted array
    for petName, chance in pairs(pets) do
        totalWeight = totalWeight + chance
        table.insert(weightedPets, {name = petName, weight = chance})
    end
    
    -- Generate random number between 0 and totalWeight
    local randomValue = math.random() * totalWeight
    local currentWeight = 0
    
    -- Find which pet the random value lands on
    for _, petData in pairs(weightedPets) do
        currentWeight = currentWeight + petData.weight
        if randomValue <= currentWeight then
            return petData.name
        end
    end
    
    -- Fallback (shouldn't happen, but just in case)
    return weightedPets[1].name
end

-- Function to find player's farm
local function findPlayerFarm()
    local player = game.Players.LocalPlayer
    
    if not workspace:FindFirstChild("Farm") then
        return nil
    end
    
    local playerName = player.Name
    
    for _, farm in pairs(workspace.Farm:GetChildren()) do
        if farm.Name == "Farm" and farm:FindFirstChild("Important") then
            local important = farm.Important
            local data = important:FindFirstChild("Data")
            if data and data:FindFirstChild("Owner") then
                local ownerValue = data.Owner.Value
                
                if tostring(ownerValue) == playerName then
                    return farm
                end
            end
        end
    end
    
    Rayfield:Notify({
        Title = "Farm Not Found",
        Content = "Could not locate your farm",
        Duration = 3,
        Image = 4483346149,
    })
    return nil
end

-- Function to create visual elements
local function createEggVisual(egg)
    local eggName = egg:GetAttribute("EggName") or "Unknown Egg"
    
    -- Debug: Check if egg has the EggName attribute
    if not egg:GetAttribute("EggName") then
        Rayfield:Notify({
            Title = "Debug Warning",
            Content = "Egg missing EggName attribute",
            Duration = 3,
            Image = 4483346149,
        })
    end
    
    -- Create highlight (red cham)
    local highlight = Instance.new("Highlight")
    highlight.FillColor = Color3.fromRGB(255, 0, 0)
    highlight.FillTransparency = 0.5
    highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
    highlight.OutlineTransparency = 0
    highlight.Parent = egg
    
    -- Create BillboardGui for text (positioned above the egg)
    local billboard = Instance.new("BillboardGui")
    billboard.Size = UDim2.new(0, 150, 0, 50)
    billboard.Adornee = egg
    billboard.AlwaysOnTop = true
    billboard.StudsOffset = Vector3.new(0, 3, 0) -- Position above the egg
    billboard.Parent = workspace
    
    -- Get saved prediction or generate new one
    local eggId = tostring(egg)
    local petName
    if SavedPredictions[eggId] then
        petName = SavedPredictions[eggId]
    else
        petName = getRandomPet(eggName)
        SavedPredictions[eggId] = petName
    end
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = petName
    textLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Font = Enum.Font.GothamBold
    -- Fixed and smaller text sizing
    textLabel.TextSize = 14
    textLabel.TextScaled = false
    textLabel.TextWrapped = true
    -- Hide text initially - only show after reroll
    textLabel.Visible = false
    textLabel.Parent = billboard
    
    return {
        highlight = highlight,
        billboard = billboard,
        textLabel = textLabel,
        eggName = eggName,
        eggId = eggId
    }
end

-- Function to update all egg visuals
local function updateEggVisuals()
    if not VisualsEnabled then 
        return 
    end
    
    local playerFarm = findPlayerFarm()
    if not playerFarm then 
        Rayfield:Notify({
            Title = "Debug Error",
            Content = "No farm found, cannot create visuals",
            Duration = 5,
            Image = 4483346149,
        })
        return 
    end
    
    -- The correct path is farm.Important.Objects_Physical
    local important = playerFarm:FindFirstChild("Important")
    if not important then
        Rayfield:Notify({
            Title = "Debug Error",
            Content = "Important folder not found in your farm",
            Duration = 5,
            Image = 4483346149,
        })
        return
    end
    
    local objectsPhysical = important:FindFirstChild("Objects_Physical")
    if not objectsPhysical then 
        Rayfield:Notify({
            Title = "Debug Error",
            Content = "Objects_Physical not found in Important folder",
            Duration = 5,
            Image = 4483346149,
        })
        return 
    end
    
    -- Clear existing visuals
    for _, visual in pairs(EggVisuals) do
        if visual.highlight then visual.highlight:Destroy() end
        if visual.billboard then visual.billboard:Destroy() end
    end
    EggVisuals = {}
    
    -- Count eggs found and check their attributes
    local totalEggs = 0
    local readyEggs = 0
    local playerEggs = 0
    local player = game.Players.LocalPlayer
    
    for _, obj in pairs(objectsPhysical:GetChildren()) do
        if obj.Name == "PetEgg" then
            totalEggs = totalEggs + 1
            
            -- Check READY attribute
            local isReady = obj:GetAttribute("READY")
            if isReady then
                readyEggs = readyEggs + 1
            end
            
            -- Check OWNER attribute - FIXED: Compare to player.Name instead of player object
            local owner = obj:GetAttribute("OWNER")
            if owner == player.Name then
                playerEggs = playerEggs + 1
                -- Only create visuals for eggs owned by the player
                EggVisuals[obj] = createEggVisual(obj)
            end
        end
    end
    
    Rayfield:Notify({
        Title = "Eggs Found",
        Content = "Total: " .. totalEggs .. " | Ready: " .. readyEggs .. " | Yours: " .. playerEggs,
        Duration = 4,
        Image = 4483346149,
    })
    
    Rayfield:Notify({
        Title = "Visuals Created",
        Content = "Created " .. playerEggs .. " egg visuals for your eggs",
        Duration = 3,
        Image = 4483346149,
    })
    
    -- No need to call updateDropdownOptions here since toggleVisuals handles it
end

-- Function to reroll predictions
local function rerollPredictions()
    for egg, visual in pairs(EggVisuals) do
        -- Skip eggs that found the selected pet
        if not PausedEggs[egg] and visual.textLabel and visual.eggName and visual.eggId then
            local newPet = getRandomPet(visual.eggName)
            visual.textLabel.Text = newPet
            visual.textLabel.Visible = true -- Show the text when rerolling
            SavedPredictions[visual.eggId] = newPet -- Update saved prediction
            
            -- Check if this matches the selected pet
            if SelectedPet ~= "" and newPet == SelectedPet then
                PausedEggs[egg] = true
                Rayfield:Notify({
                    Title = "Pet Found!",
                    Content = "Found " .. SelectedPet .. " on an egg!",
                    Duration = 3,
                    Image = 4483346149,
                })
            end
        end
    end
end

-- Function to toggle visuals
local function toggleVisuals(state)
    VisualsEnabled = state
    if state then
        updateEggVisuals()
        -- Show available pets when visuals are enabled
        wait(0.1) -- Small delay to ensure visuals are created
        showAvailablePets()
    else
        -- Clear all visuals
        for _, visual in pairs(EggVisuals) do
            if visual.highlight then visual.highlight:Destroy() end
            if visual.billboard then visual.billboard:Destroy() end
        end
        EggVisuals = {}
        PausedEggs = {} -- Clear paused eggs when disabling
    end
end

-- Function to handle auto reroll
local function handleAutoReroll()
    if AutoRerollConnection then
        AutoRerollConnection:Disconnect()
    end
    
    if AutoRerollEnabled and VisualsEnabled then
        AutoRerollConnection = game:GetService("RunService").Heartbeat:Connect(function()
            wait(RerollSpeed)
            rerollPredictions()
        end)
    end
end

-- Original tabs
local Tab = Window:CreateTab("Grow a Gaden Scripts", 4483346149) -- Title, Image
local Button = Tab:CreateButton({
   Name = "Lunor Script",
   Callback = function()
   loadstring(game:HttpGet("https://lunor.dev/loader"))()
   Rayfield:Notify({
   Title = "Ran Lunor",
   Content = "Thanks for using KenriScripts Hub",
   Duration = 6.5,
   Image = 17642264096,
})
   end,
})
local Button = Tab:CreateButton({
   Name = "Native",
   Callback = function()
   (loadstring or load)(game:HttpGet("https://getnative.cc/script/loader"))()
   Rayfield:Notify({
   Title = "Ran Native",
   Content = "Thank you for using KenriScripts. ",
   Duration = 6.5,
   Image = 17642264096,
})
   end,
})
local Tab = Window:CreateTab("Grow A Garden Exploits", 4483362458)
local Button = Tab:CreateButton({
   Name = "Pet Spawner",
   Callback = function()
   local Spawner = loadstring(game:HttpGet("https://gitlab.com/darkiedarkie/dark/-/raw/main/Spawner.lua"))()
Spawner.Load()
   end,
})

local Button = Tab:CreateButton({
   Name = "Trading Exploit",
   Callback = function()
   loadstring(game:HttpGet("https://raw.githubusercontent.com/Kenri-rec/Grow-A-Garden-Script/refs/heads/main/trade-freeze"))()
   Rayfield:Notify({
   Title = "Ran Trading Exploit",
   Content = "Trading exploit loaded successfully!",
   Duration = 6.5,
   Image = 4483362458,
})
   end,
})

-- New Pet Egg Visuals Tab
local EggTab = Window:CreateTab("Pet Egg Visuals", 4483346149)

local PetEggToggle = EggTab:CreateToggle({
   Name = "Pet Egg Visuals",
   CurrentValue = false,
   Flag = "PetEggVisualsToggle",
   Callback = function(Value)
       toggleVisuals(Value)
   end,
})

local RerollButton = EggTab:CreateButton({
   Name = "Reroll",
   Callback = function()
       if VisualsEnabled then
           PausedEggs = {} -- Reset paused eggs when manually rerolling
           rerollPredictions()
           Rayfield:Notify({
               Title = "Rerolled",
               Content = "Pet predictions have been rerolled!",
               Duration = 2,
               Image = 4483346149,
           })
       else
           Rayfield:Notify({
               Title = "Enable Visuals First",
               Content = "Please enable Pet Egg Visuals first!",
               Duration = 3,
               Image = 4483346149,
           })
       end
   end,
})

-- Declare variables (no more dropdown)
local SelectedPetInput

local AutoRerollToggle = EggTab:CreateToggle({
   Name = "Auto Reroll",
   CurrentValue = false,
   Flag = "AutoRerollToggle",
   Callback = function(Value)
       AutoRerollEnabled = Value
       handleAutoReroll()
   end,
})

local RerollSpeedSlider = EggTab:CreateSlider({
   Name = "Auto Reroll Speed (0.5s)",
   Range = {0, 10},
   Increment = 1,
   Suffix = " (0.5s)",
   CurrentValue = 1,
   Flag = "RerollSpeedSlider",
   Callback = function(Value)
       RerollSpeed = Value * 0.5
       if Value == 0 then
           RerollSpeed = 0.25 -- Minimum speed to prevent issues
       end
       if AutoRerollEnabled then
           handleAutoReroll()
       end
   end,
})

SelectedPetInput = EggTab:CreateInput({
   Name = "Selected Pet (Case Sensitive)",
   PlaceholderText = "Enter pet name here...",
   RemoveTextAfterFocusLost = false,
   Flag = "SelectedPetInput",
   Callback = function(Text)
       SelectedPet = Text
       PausedEggs = {} -- Reset paused eggs when changing selection
   end,
})

local ShowPetsButton = EggTab:CreateButton({
   Name = "Show Available Pets",
   Callback = function()
       if VisualsEnabled and next(EggVisuals) then
           -- Group eggs by type and their pets
           local eggGroups = {}
           
           for egg, visual in pairs(EggVisuals) do
               local eggName = visual.eggName
               if not eggGroups[eggName] then
                   eggGroups[eggName] = {}
               end
               
               if PetData[eggName] then
                   for petName, _ in pairs(PetData[eggName]) do
                       eggGroups[eggName][petName] = true
                   end
               end
           end
           
           -- Create separate notifications for each egg type
           for eggName, pets in pairs(eggGroups) do
               local petNames = {}
               for petName, _ in pairs(pets) do
                   table.insert(petNames, petName)
               end
               table.sort(petNames)
               
               local petsList = table.concat(petNames, ", ")
               
               Rayfield:Notify({
                   Title = eggName .. " (" .. #petNames .. " pets)",
                   Content = petsList,
                   Duration = 6,
                   Image = 4483346149,
               })
               
               wait(0.2) -- Small delay between notifications to prevent overlap
           end
       else
           Rayfield:Notify({
               Title = "Enable Visuals First",
               Content = "Please enable Pet Egg Visuals first!",
               Duration = 3,
               Image = 4483346149,
           })
       end
   end,
})

-- Function to show available pets (replaces dropdown update)
local function showAvailablePets()
    if not VisualsEnabled or not next(EggVisuals) then
        return
    end
    
    local uniquePets = getAllUniquePets()
    
    if #uniquePets > 0 then
        local petsList = table.concat(uniquePets, ", ")
        Rayfield:Notify({
            Title = "Available Pets (" .. #uniquePets .. ")",
            Content = petsList,
            Duration = 6,
            Image = 4483346149,
        })
    else
        Rayfield:Notify({
            Title = "No Pets Found",
            Content = "No pets found from your eggs",
            Duration = 3,
            Image = 4483346149,
        })
    end
end
